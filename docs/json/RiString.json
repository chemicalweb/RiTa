{
    "class": "rita.RiString",
    "fields": [
   	{
      "name": "features",
      "example":"theFeatures = myRiString.features();",
      "description":"Returns the current set of features for the object, including <a target=_new href='../../PhonemeTags.html'>phonemes</a>, syllables, stresses, etc.",
      "syntax":"features();",
      "parameters":[],
	  "returns":
      [
			{ 
			"type": "Object", 
			"desc": "Map (in Java), Object with key-value pairs (in JS)" 
			}
	  ],
      "related":"RiString.analyze()<br>RiString.get()",
      "platform":"Java / Javascript",
	  "note":""
    },
	{
      "name": "analyze",
      "example":"myRiString.analyze();<br><br>myRiString.get(RiTa.PHONEMES);<br><br>OR<br><br>myRiString.get(\"phonemes\");",
      "description":"Computes a set of features for the object, including <a target=_new href='../../PhonemeTags.html'>phonemes</a>, syllables, stresses, etc. To access any of these, use myRiString.get(featureName)",
      "syntax":"analyze();",
      "parameters":[],
	  "returns":
      [
			{ 
			"type": "RiString", 
			"desc": "this RiString" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "name": "charAt",
      "example":"",
      "description":"Returns the character at the specified 'index'",
      "syntax":"charAt(index);",
      "parameters":
      [
			{ 
			"type": "int", 
			"desc": "index of the character (accepts negative offsets, which count backward from the end)" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "String", 
			"desc": "the character as a String" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "name": "concat",
      "example":"",
      "description":"Concatenates the text from another RiString at the end of this one",
      "syntax":"concat(riString);",
      "parameters":
      [
			{ 
			"type": "RiString", 
			"desc": "RiString" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "RiString", 
			"desc": "this RiString" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "name": "copy",
      "example":"",
      "description":"Creates and returns a field-for-field copy of the object",
      "syntax":"copy();",
      "parameters":
      [
		
			
	  ],
	  "returns":
      [
			{ 
			"type": "RiString", 
			"desc": "a copy of the RiString" 
			}
			
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "name": "endsWith",
      "example":"",
      "description":"Tests if this string ends with the specified suffix",
      "syntax":"endsWith(suffix);",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "string the suffix" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "boolean", 
			"desc": "true if the character sequence represented by the argument is a suffix of the character sequence represented by this object; false otherwise" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "name": "equals",
      "example":"",
      "description":"Compares this RiString to the specified object. <br/>The result is true if and only if the argument is not null and is a String or RiString object that represents the same sequence of characters as this object.",
      "syntax":"equals(string);<br/>equals(ristring);",
      "parameters":
      [
			{ 
			"type": "String OR RiString", 
			"desc": "String or RiString object to compare this RiString against" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "boolean", 
			"desc": "true if the RiString are equal; false otherwise." 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "name": "equalsIgnoreCase",
      "example":"",
      "description":"Compares this RiString to another RiString or a String, ignoring case considerations",
      "syntax":"equalsIgnoreCase(string);<br/>equalsIgnoreCase(ristring);",
      "parameters":
      [
			{ 
			"type": "String OR RiString", 
			"desc": "String or RiString object to compare this RiString against" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "boolean", 
			"desc": "true if the argument is not null and the Strings are equal, ignoring case; false otherwise" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "name": "indexOf",
      "example":"",
      "description":"Returns the index within this string of the first occurrence of the 'searchstring'",
      "syntax":"indexOf(searchstring);<br/>indexOf(searchstring, start);",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "searchstring to search for" 
			},
			{ 
			"type": "int", 
			"desc": "(Optional) The start position in the string to start the search. If omitted, the search starts from position 0" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "int", 
			"desc": "the first index of the matching pattern or -1 if not found" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
    {
      "name": "insertWord",
      "example":"",
      "description":"Inserts 'newWord' at 'wordIdx' and shifts each subsequent word accordingly.",
      "syntax":"insertWord(newWord, wordIdx);",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "the new word to insert" 
			},
			{ 
			"type": "int", 
			"desc": "the position at which it insert the word" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "RiString", 
			"desc": "this RiString" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "name": "lastIndexOf",
      "example":"",
      "description":"Returns the index within this string of the last occurrence of the specified character",
      "syntax":"lastIndexOf(searchstring);<br/>lastIndexOf(searchstring, start);",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "what to search for" 
			},
			{ 
			"type": "int", 
			"desc": "(Optional) The start position in the string to start the search. If omitted, the search starts from position 0" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "int", 
			"desc": "the last index of the matching pattern or -1 if none are found" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "name": "length",
      "example":"",
      "description":"Returns the length of this string",
      "syntax":"length();",
      "parameters":   [	  ],
	  "returns":
      [
			{ 
			"type": "int", 
			"desc": "the length" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "name": "pos",
      "example":"",
      "description":"Returns an array of part-of-speech tags (from the <a href='../../PennTags.html'>PENN tag set</a>), one per word, using RiTa.tokenize() and RiTa.getPosTags()",
      "syntax":"pos();",
      "parameters":
      [

	  ],
	  "returns":
      [
			{ 
			"type": "String[]", 
			"desc": "strings of pos, one per word" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "name": "posAt",
      "example":"",
      "description":"Returns the part-of-speech tag for the word at 'index' (from the <a href='../../PennTags.html'>PENN tag set</a>), using RiTa.tokenize() and RiTa.getPosTags()",
      "syntax":"posAt(index);",
      "parameters":
      [
			{ 
			"type": "int", 
			"desc": "the word index" 
			}
		
	  ],
	  "returns":
      [
			{ 
			"type": "String", 
			"desc": "the pos" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "name": "removeChar",
      "example":"",
      "description":"Removes the character at the specified index",
      "syntax":"removeChar(index);",
      "parameters":
      [
			{ 
			"type": "int", 
			"desc": "the index" 
			}
		
	  ],
	  "returns":
      [
			{ 
			"type": "RiString", 
			"desc": "this RiString" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "name": "replaceChar",
      "example":"",
      "description":"Replaces the character at 'idx' with 'replaceWith'. <br/>If the specified 'idx' is less than zero, or beyond the length of the current text, there will be no effect",
      "syntax":"replaceChar(idx, replaceWith);",
      "parameters":
      [
			{ 
			"type": "int", 
			"desc": "the character index" 
			},
			{ 
			"type": "String", 
			"desc": "the replacement" 
			}
		
	  ],
	  "returns":
      [
			{ 
			"type": "RiString", 
			"desc": "this RiString" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
  	}, 
	{
      "name": "match",
      "example":"",
      "description":"Tells whether the string matches the given regular expression, and if so, returns all matches.",
      "syntax":"match(pattern);",
      "parameters":
      [
			{ 
			"type": "String or Object (the regex)",  
			"desc": "regular expression" 
			}
		
	  ],
	  "returns":
      [
			{ 
			"type": "String[]", 
			"desc": "string array of matches or empty array if none are found" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "name": "replaceFirst",
      "example":"",
      "description":"Replaces the first instance of 'substitution' with 'replacement'. Regular expressions (non-global) will be used only if the 1st argument is a regular expression, otherwise only generic string-matching is used (special regex characaters are escaped)",
      "syntax":"replaceFirst(substitution, replacement);",
      "parameters":
      [
			{ 
			"type": "String or Object (the regex pattern)",
			"desc": "the pattern" 
			},
			{ 
			"type": "String", 
			"desc": "the replacement" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "RiString", 
			"desc": "this RiString" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "name": "replaceAll",
      "example":"",
      "description":"Replaces each occurrence of 'substitution' with 'replacement'. Regular expressions will be used if the 1st argument is a regular expression, otherwise only generic string-matching is used (special regex characaters are escaped)",
      "syntax":"replaceAll(substitution, replacement);",
      "parameters":
      [
			{ 
			"type": "String or Object (the regex)", 
			"desc": "the pattern to be matched" 
			},
			{ 
			"type": "String", 
			"desc": "the replacement string" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "RiString", 
			"desc": "this RiString" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "name": "replaceWord",
      "example":"",
      "description":"Replaces the word at 'wordIdx' with 'newWord'",
      "syntax":"replaceWord(wordIdx, newWord);",
      "parameters":
      [
			{ 
			"type": "int", 
			"desc": "the index" 
			},
			{ 
			"type": "String", 
			"desc": "the replacement" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "RiString", 
			"desc": "this RiString" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "name": "slice",
      "example":"",
      "description":"Extracts a part of a string from this RiString",
      "syntax":"slice(begin);<br/>slice(begin, end);",
      "parameters":
      [
			{ 
			"type": "int", 
			"desc": "The index where to begin the extraction. First character is at index 0" 
			},
			{ 
			"type": "int", 
			"desc": "(Optional) Where to end the extraction. If omitted, slice() selects all characters from the begin position to the end of the string" 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "String", 
			"desc": "" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "name": "split",
      "example":"",
      "description":"Split a RiString into an array of RiStrings, one for each element after the split, and returns the new array.",
      "syntax":"split();<br/>split(separator);<br/>",
      "parameters": [
			{ 
			"type": "String", 
			"desc": "(Optional) Specifies the character to use for splitting the string. If omitted, the string is split according to RiTa.tokenize(). If an empty string (\"\") is used as the separator, the string is split between each character." 
			}
	  ],
	  "returns":
      [
			{ 
			"type": "RiStrings[]", 
			"desc": "the RiString array" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "name": "startsWith",
      "example":"",
      "description":"Tests if this string starts with the specified prefix",
      "syntax":"startsWith(substr);",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "string the prefix" 
			}

	  ],
	  "returns":
      [
			{ 
			"type": "boolean", 
			"desc": "true if the character sequence represented by the argument is a prefix of the character sequence represented by this string; false otherwise. <br/>Note also that true will be returned if the argument is an empty string or is equal to this RiString object as determined by the equals() method." 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "name": "substring",
      "example":"",
      "description":"Extracts the characters from a string, between two specified indices, and sets the current text to be that string. ",
      "syntax":"substring(from);<br/>substring(from, to);",
      "parameters":
      [
			{ 
			"type": "int", 
			"desc": "The index where to start the extraction. First character is at index 0" 
			},
			{ 
			"type": "int", 
			"desc": "(optional) The index where to stop the extraction. If omitted, it extracts the rest of the string" 
			}

	  ],
	  "returns":
      [
			{ 
			"type": "String", 
			"desc": "" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "name": "substr",
      "example":"",
      "description":"Extracts the characters from this objects contained string, beginning at 'start' and continuing through the specified number of characters, and sets the current text to be that string. (from Javascript String)",
      "syntax":"substr(start);<br/>substr(start, length);",
      "parameters":
      [
			{ 
			"type": "int", 
			"desc": "The index where to start the extraction. First character is at index 0" 
			},
			{ 
			"type": "int", 
			"desc": "(optional) The index where to stop the extraction. If omitted, it extracts the rest of the string" 
			}

	  ],
	  "returns":
      [
			{ 
			"type": "String", 
			"desc": "" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "name": "text",
      "example":"",
      "description":"Gets/sets the text contained by this object",
      "syntax":"text();<br/>text(theText);",
      "parameters":
      [
			{ 
			"type": "String", 
			"desc": "text (optional)" 
			}

	  ],
	  "returns":
      [
			{ 
			"type": "String OR RiString", 
			"desc": "the contained text (for sets) or this RiString (for gets)" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "name": "toCharArray",
      "hidden":true,
      "description":"Converts this object to an array of RiString objects, one per character",
      "syntax":"toCharArray();",
      "parameters":
      [
	  ],
	  "returns":
      [
			{ 
			"type": "RiString[]", 
			"desc": "RiStrings with each letter as its own RiString element" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "name": "toLowerCase",
      "example":"",
      "description":"Converts all of the characters in this RiString to lower case",
      "syntax":"toLowerCase();",
      "parameters":
      [
	  ],
	  "returns":
      [
			{ 
			"type": "RiString", 
			"desc": "this RiString" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "name": "toUpperCase",
      "example":"",
      "description":"Converts all of the characters in this RiString to upper case",
      "syntax":"toUpperCase();",
      "parameters":
      [
	  ],
	  "returns":
      [
			{ 
			"type": "RiString", 
			"desc": "this RiString" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "name": "trim",
      "example":"",
      "description":"Removes leading and trailing whitespace from the RiString",
      "syntax":"trim();",
      "parameters":
      [
	  ],
	  "returns":
      [
			{ 
			"type": "RiString", 
			"desc": "this RiString" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "name": "wordAt",
      "example":"",
      "description":"Returns the word at 'index', according to RiTa.tokenize()",
      "syntax":"wordAt(index);",
      "parameters":
      [
			{ 
			"type": "int", 
			"desc": "the word index" 
			}

	  ],
	  "returns":
      [
			{ 
			"type": "String", 
			"desc": "the word" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "name": "wordCount",
      "example":"",
      "description":"Returns the number of words in the object, according to RiTa.tokenize().",
      "syntax":"wordCount();",
      "parameters":
      [
	  ],
	  "returns":
      [
			{ 
			"type": "int", 
			"desc": "number of words" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   },
   {
      "name": "words",
      "example":"",
      "description":"Returns the array of words in the object, via a call to RiTa.tokenize()",
      "syntax":"words();",
      "parameters":
      [
	  ],
	  "returns":
      [
			{ 
			"type": "String[]", 
			"desc": "array of words" 
			}
	  ],
      "related":"",
      "platform":"Java / Javascript",
	  "note":""
   }  
]
}